// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive",
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return this._contents.length;
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;", $isCollection: true};

$$.DateTime = {"": "Object;millisecondsSinceEpoch>,isUtc",
  $eq: function(other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch);
  },
  $lt: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$lt(t1, t3);
    }
  },
  $gt: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$gt(t1, t3);
    }
  },
  $ge: function(other) {
    return $.$$ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function() {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function() {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(duration) {
    var ms, t2;
    ms = this.millisecondsSinceEpoch;
    t2 = duration.get$inMilliseconds();
    if (typeof ms !== "number")
      return this.add$1$bailout(1, duration, ms);
    if (typeof t2 !== "number")
      return this.add$1$bailout(2, 0, ms, t2);
    return $.DateTime$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
  },
  add$1$bailout: function(state0, duration, ms, t2) {
    switch (state0) {
      case 0:
        ms = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t2 = duration.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.DateTime$fromMillisecondsSinceEpoch($.$$add(ms, t2), this.isUtc);
    }
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.$$gt($.abs(millisecondsSinceEpoch), 8640000000000000) === true)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true
};

$$.Duration = {"": "Object;inMilliseconds>",
  get$inHours: function() {
    return $.$$tdiv(this.inMilliseconds, 3600000);
  },
  get$inMinutes: function() {
    return $.$$tdiv(this.inMilliseconds, 60000);
  },
  get$inSeconds: function() {
    return $.$$tdiv(this.inMilliseconds, 1000);
  },
  $eq: function(other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$$eq(this.inMilliseconds, other.inMilliseconds);
  },
  get$hashCode: function() {
    return $.hashCode(this.inMilliseconds);
  },
  toString$0: function() {
    var t1, t2, t3, t4, twoDigitMinutes, twoDigitSeconds, threeDigitMs;
    t1 = new $.Duration_toString_threeDigits();
    t2 = new $.Duration_toString_twoDigits();
    t3 = this.inMilliseconds;
    t4 = $.getInterceptor$JSNumber(t3);
    if (t4.$lt(t3, 0) === true)
      return "-" + $.S($.Duration$(0, 0, t4.$negate(t3), 0, 0));
    twoDigitMinutes = t2.call$1($.remainder(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder(this.get$inSeconds(), 60));
    threeDigitMs = t1.call$1(t4.remainder$1(t3, 1000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(threeDigitMs);
  },
  $isDuration: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.JsStringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString(t1.sb_0);
    t1.sb_0 = $.JsStringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.toString(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.JsStringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSArrayJSString(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString(t1.sb_0);
          t1.sb_0 = $.JsStringBuffer$("");
          for (t3 = $.getInterceptor$JSArrayJSString(t2), i = 0; $.CONSTANT6.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;",
  toString$0: function() {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IllegalJSRegExpException = {"": "FormatException;message"};

$$.Iterable = {"": "Object;",
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$length: function() {
    var it, count;
    it = this.get$iterator();
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return this.get$iterator().moveNext$0() !== true;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.ObjectInterceptor = {"": "Object;",
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  $shl: function(receiver, a0) {
    return receiver.$shl(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  codeUnitAt$1: function(receiver, a0) {
    return receiver.codeUnitAt$1(a0);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  remainder$1: function(receiver, a0) {
    return receiver.remainder$1(a0);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  $xor: function(receiver, a0) {
    return receiver.$xor(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $isCollection: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    return this.codeUnitAt$1(receiver, index);
  },
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, 0, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    hash = $.$$and($.hashCode(key), this._keys.length - 1);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var newNumberOfEntries, capacity, t1;
    newNumberOfEntries = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(newNumberOfEntries, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    t1 = this._numberOfDeleted;
    if (t1 > capacity - newNumberOfEntries - t1)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT4)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT4) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT4))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, value;
    index = this._probeForLookup$1(key);
    if ($.$$ge(index, 0) === true) {
      this._numberOfEntries = $.$$sub(this._numberOfEntries, 1);
      t1 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t1.length)
        throw $.ioore(index);
      value = t1[index];
      t1[index] = null;
      t1 = this._keys;
      if (index >= t1.length)
        throw $.ioore(index);
      t1[index] = $.CONSTANT4;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  get$isEmpty: function() {
    return $.$$eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: true
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, $length, t3, newIndex, t2, key;
    t1 = this._map;
    $length = $.length(t1.get$_keys());
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, $length, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, $length, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < $length;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
        return this.moveNext$0$bailout(3, $length, t1, t2, newIndex, $.CONSTANT5);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT4)) {
        this._current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = $length;
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, $length, t1, t3, newIndex, t2) {
    switch (state0) {
      case 0:
        t1 = this._map;
        $length = $.length(t1.get$_keys());
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.$$add(t3, 1);
      case 3:
        var key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$JSNumber(newIndex);
                if (!(t2.$lt(newIndex, $length) === true))
                  break L0;
                t3 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.$$index(t3, newIndex);
                if (!(key == null) && !(key === $.CONSTANT4)) {
                  this._current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = t2.$add(newIndex, 1);
            }
        this._index = $length;
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
        return this.$$indexSet$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
        return this.$$indexSet$bailout(2, key, 0, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var entry = $.$$index(this._map, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var entry = $.remove(this._map, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    return $.MappedIterable$(this._list, new $._LinkedHashMapImpl_keys_anon());
  },
  get$values: function() {
    return $.MappedIterable$(this._list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._list = $.DoubleLinkedQueue$();
  },
  $isMap: true
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Collection;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: true
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._current = null;
      this._sentinel = null;
      return false;
    }
    this._current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function() {
    return $.MappedIterator$(this._iterable.get$iterator(), this._f);
  },
  get$length: function() {
    return this._iterable.get$length();
  },
  get$isEmpty: function() {
    return this._iterable.get$isEmpty();
  }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.ListIterator = {"": "Object;_liblib$_list,_length,_position,_liblib$_current",
  moveNext$0: function() {
    var t1, t2, t3, nextPosition;
    t1 = this._liblib$_list;
    t2 = t1.length;
    t3 = this._length;
    if (t2 !== t3)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout(1, t2, t1, t3);
    nextPosition = t2 + 1;
    if (nextPosition < t3) {
      this._position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t2, t1, t3) {
    var nextPosition = $.$$add(t2, 1);
    if ($.$$lt(nextPosition, t3) === true) {
      this._position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = !($.get$globalWorker() == null) && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.isEmpty(this.isolates) === true && $.$$eq(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet(this.ports, portId, port);
    $.$$indexSet($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove(this.ports, portId);
    if ($.isEmpty(this.ports) === true)
      $.remove($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if (!($globalState.rootContext == null) && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.isEmpty($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq(this._workerId, other._workerId) === true && $.$$eq(this._isolateId, other._isolateId) === true && $.$$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    return $.$$xor($.$$xor($.$$shl(this._workerId, 16), $.$$shl(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if (!($.$$index(this._visited, list) == null))
      return;
    $.$$indexSet(this._visited, list, true);
    $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if (!($.$$index(this._visited, map) == null))
      return;
    $.$$indexSet(this._visited, map, true);
    $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSArrayJSString(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(object, info) {
    $.add(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var $length, i;
    $length = $.length(this.tagged);
    if (typeof $length !== "number")
      return this.cleanup$0$bailout(1, $length);
    i = 0;
    for (; i < $length; ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, $length) {
    var i = 0;
    for (; $.CONSTANT6.$lt(i, $length); ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!x.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!x.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i, t1;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior)
      return this.visitList$1$bailout1(1, list);
    copy = $.$$index(this._visited, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.$$indexSet(this._visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        copy = $.$$index(this._visited, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var copy, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.$$indexSet(this._visited, list, copy);
        for (i = 0; $.CONSTANT6.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index(this._visited, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $._HashMapImpl$();
    $.$$indexSet(this._visited, map, t1.copy_0);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index(this._visited, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index(this._visited, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, map, id);
    return ["map", id, this._serializeList$1($.toList(map.get$keys())), this._serializeList$1($.toList(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT6.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $._HashMapImpl$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index(x, 1);
    return $.$$index(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id, t2, len) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        dartList = t1.$index(x, 2);
      case 1:
        state0 = 0;
        $.$$indexSet(this._deserialized, id, dartList);
        t2 = $.getInterceptor$JSArrayJSString(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, i;
        state0 = 0;
        for (i = 0; $.CONSTANT6.$lt(i, len); ++i)
          t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $._HashMapImpl$();
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    $.$$indexSet(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $._HashMapImpl$();
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        $.$$indexSet(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSArrayJSString(values), i = 0; $.CONSTANT6.$lt(i, len); ++i)
          result.$indexSet(this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq(milliseconds, 0) === true)
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon0(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  },
  TimerImpl$repeating$2: function(milliseconds, callback) {
    var t1;
    if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.anon(this, callback), 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Repeating timer."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.add$1("'");
    message = null;
    try {
      message = $.toString(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.add$1(message);
    buffer.add$1("'\n");
    t1 = this.stackTrace;
    if (!(t1 == null)) {
      buffer.add$1("Stack trace:\n");
      buffer.add$1($.toString(t1));
      buffer.add$1("\n");
    }
  },
  toString$0: function() {
    var buffer, cause;
    buffer = $.JsStringBuffer$("");
    buffer.add$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      buffer.add$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0();
  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq(this._state, 1);
  },
  get$_hasError: function() {
    return $.$$eq($.$$and(this._state, 2), 0) !== true;
  },
  get$_hasUnhandledError: function() {
    return $.$$eq($.$$and(this._state, 4), 0) !== true;
  },
  _clearUnhandledError$0: function() {
    this._state = $.$$and(this._state, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.TimerImpl$(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.TimerImpl$(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or(this._state, 4);
    $.TimerImpl$(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Duration_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$JSNumber(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$JSNumber(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    t1 = $.getInterceptor$JSNumber(absN);
    if (t1.$ge(absN, 1000) === true)
      return $.S(n);
    if (t1.$ge(absN, 100) === true)
      return sign + "0" + $.S(absN);
    if (t1.$ge(absN, 10) === true)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$JSNumber(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.TimerImpl$(0, new $._EventLoop__runHelper_next_anon(this));
  }
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index($globalState.managers, t1.get$_workerId());
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, remaining;
    t1 = this.values_2;
    $.$$indexSet(t1, this.pos_3, value);
    t2 = this.box_0;
    remaining = $.$$sub(t2.remaining_0, 1);
    t2.remaining_0 = remaining;
    if ($.$$eq(remaining, 0) === true)
      this.completer_1.complete$1(t1);
  }
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$.anon0 = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.topEventLoop;
    t2.set$activeTimerCount($.$$sub(t2.get$activeTimerCount(), 1));
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index($globalState.isolates, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.currentContext == null) && $.$$eq($globalState.currentContext.get$id(), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, list.length, -1, null);
};

$.ToString_collectionToString = function(c) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || !!c.$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isCollection))
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var scripts, len, i, script, src, t1;
  scripts = document.getElementsByTagName('script');
  for (len = scripts.length, i = 0; i < len; ++i) {
    script = scripts[i];
    src = script && script.src;
    t1 = $.getInterceptor(src);
    if (!(src == null) && t1.endsWith$1(src, "test_controller.js") !== true && t1.endsWith$1(src, "dart.js") !== true)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSArrayJSString(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.$index(msg, "port") == null))
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.TimerImpl$repeating = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$repeating$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$JSString($name);
  return t1.charCodeAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT0;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT2.get$iterator(keyValuePairs);
  result = $._LinkedHashMapImpl$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $._currentIsolate();
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$JSArrayJSString(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.callTypeCast = function(value, property) {
  var t1;
  if (!(value == null))
    t1 = typeof value === "object" && value[property]();
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = !($name === "") && !($name === "Object") && !($name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT7));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError($name + " is not a function");} else {return Object.prototype[$name].apply(this, arguments);}};
  if ($.callHasOwnProperty(hasOwnPropertyFunction, proto, $name) !== true)
    $.defineProperty(proto, $name, method);
  return method.apply(obj, $arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT7)[$name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.JsStringBuffer$("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.JsStringBuffer$("");
      $length = receiver.length;
      result.add$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function($content) {
  var t1 = $content;
  return new $.JsStringBuffer(t1);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, i0;
  t1 = {};
  t2 = $.getInterceptor$JSArrayJSString(futures);
  if (t2.get$isEmpty(futures) === true)
    return $._FutureImpl$immediate($.CONSTANT8);
  completer = $._CompleterImpl$();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    i0 = i + 1;
    t2.get$current().then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer$repeating = function(milliseconds, callback) {
  return $.TimerImpl$repeating(milliseconds, callback);
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT6.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, $length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub($length, 1));
};

$._HashMapImplKeyIterable$ = function(_map) {
  return new $._HashMapImplKeyIterable(_map);
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, milliseconds, minutes, seconds) {
  return new $.Duration($.$$add($.$$add($.$$add($.$$add($.$$mul(days, 86400000), $.$$mul(hours, 3600000)), $.$$mul(minutes, 60000)), $.$$mul(seconds, 1000)), milliseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(pattern, errmsg) {
  return new $.IllegalJSRegExpException("Illegal pattern: " + $.S(pattern) + ", " + errmsg);
};

$.List_List = function($length) {
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return new Array($length);
};

$.List_List$fixedLength = function($length, fill) {
  var result, t1, i;
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = $.Primitives_newFixedList($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior)
    return $.List_List$fixedLength$bailout(1, $length, fill, result);
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, $length, fill, result) {
  var t1, i;
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSArrayJSString(result), i = 0; $.CONSTANT6.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.main = function() {
  $.canvas = $.callTypeCast(document.query$1("#canvas"), "$isCanvasElement");
  $.ctx = $.canvas.get$context2d();
  $.ctx.set$font("15px Arial");
  $.HAND_TRUNCATION = $.$$div($.canvas.get$width(), 25);
  $.HOUR_HAND_TRUNCATION = $.$$div($.canvas.get$width(), 10);
  $.RADIUS = $.$$sub($.$$div($.canvas.get$width(), 2), 35);
  $.HAND_RADIUS = $.$$add($.get$RADIUS(), 20);
  $.Timer_Timer$repeating($.CONSTANT.inMilliseconds, $.drawClock);
};

$.drawClock = function(timer) {
  $.drawCircle();
  $.drawHands();
};

$.drawCircle = function() {
  $.ctx.beginPath$0();
  $.ctx.arc$6($.$$div($.canvas.get$width(), 2), $.$$div($.canvas.get$height(), 2), $.get$RADIUS(), 0, 6.283185307179586, true);
  $.ctx.stroke$0();
};

$.drawHand = function(loc, isHour) {
  var t1, angle, handRadius, t2, t3;
  t1 = $.$$div(loc, 60);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  angle = 6.283185307179586 * t1 - 1.5707963267948966;
  handRadius = isHour ? $.$$sub($.$$sub($.get$RADIUS(), $.get$HAND_TRUNCATION()), $.get$HOUR_HAND_TRUNCATION()) : $.$$sub($.get$RADIUS(), $.get$HAND_TRUNCATION());
  $.ctx.moveTo$2($.$$div($.canvas.get$width(), 2), $.$$div($.canvas.get$height(), 2));
  t1 = $.ctx;
  t2 = $.$$div($.canvas.get$width(), 2);
  t3 = Math.cos($.checkNum(angle));
  if (typeof handRadius !== "number")
    throw $.iae(handRadius);
  t1.lineTo$2($.$$add(t2, t3 * handRadius), $.$$add($.$$div($.canvas.get$height(), 2), Math.sin($.checkNum(angle)) * handRadius));
  $.ctx.stroke$0();
};

$.drawHands = function() {
  var date, hour, t1;
  date = $.DateTime$_now();
  hour = date.get$hour();
  t1 = $.getInterceptor$JSNumber(hour);
  if (t1.$gt(hour, 12) === true)
    hour = t1.$sub(hour, 12);
  $.drawHand($.$$add($.$$mul(hour, 5), $.$$mul($.$$div(date.get$minute(), 60), 5)), true);
  $.drawHand(date.get$minute(), false);
  $.drawHand(date.get$second(), false);
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.drawClock.call$1 = $.drawClock;
$.drawClock.$name = "drawClock";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.$int = {builtin$cls: '$int'};
$.CONSTANT3 = new Isolate.$isolateProperties.JSNull();
$.CONSTANT2 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT5 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT6 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT0 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT7 = new Isolate.$isolateProperties.Object();
$.CONSTANT = new Isolate.$isolateProperties.Duration(1000);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT8 = Isolate.makeConstantList([]);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.canvas = null;
$.ctx = null;
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.$$shl = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shl(receiver, a0);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.abs = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).abs$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$isEmpty(receiver);
};
$.length = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$length(receiver);
};
$.remainder = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).remainder$1(receiver, a0);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.$$xor = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$xor(receiver, a0);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArrayJSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, "HAND_TRUNCATION", "HAND_TRUNCATION", "get$HAND_TRUNCATION", function() {
  return $.$$div($.canvas.get$width(), 25);
});
Isolate.$lazy($, "HOUR_HAND_TRUNCATION", "HOUR_HAND_TRUNCATION", "get$HOUR_HAND_TRUNCATION", function() {
  return $.$$div($.canvas.get$width(), 10);
});
Isolate.$lazy($, "RADIUS", "RADIUS", "get$RADIUS", function() {
  return $.$$sub($.$$div($.canvas.get$width(), 2), 35);
});
Isolate.$lazy($, "HAND_RADIUS", "HAND_RADIUS", "get$HAND_RADIUS", function() {
  return $.$$add($.get$RADIUS(), 20);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isCanvasElement: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height>,width>",
  getContext$2: function(contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this._getContext_1$2(contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(contextId);
  },
  getContext$1: function(contextId) {
    return this.getContext$2(contextId, $);
  },
  _getContext_1$2: function(contextId, attrs) {
    return this.getContext(contextId,attrs);
  },
  _getContext_2$1: function(contextId) {
    return this.getContext(contextId);
  },
  get$context2d: function() {
    return this.getContext$1("2d");
  },
  $isCanvasElement: function() {
    return true;
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "font<",
  arc$6: function(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.arc(x,y,radius,startAngle,endAngle,anticlockwise);
  },
  beginPath$0: function() {
    return this.beginPath();
  },
  lineTo$2: function(x, y) {
    return this.lineTo(x,y);
  },
  moveTo$2: function(x, y) {
    return this.moveTo(x,y);
  },
  stroke$0: function() {
    return this.stroke();
  }
});

$.$defineNativeClass("CharacterData", {"": "length>"});

$.$defineNativeClass("Document", {
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT1.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "id>"});

$.$defineNativeClass("HTMLEmbedElement", {"": "height>,width>"});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height>,width>"});

$.$defineNativeClass("HTMLImageElement", {"": "height>,width>",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height>,pattern>,value=,width>"});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("HTMLMediaElement", {"": "error>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("Node", {
  remove$0: function() {
    var t1 = this.parentNode;
    if (!(t1 == null))
      t1.$$dom_removeChild$1(this);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height>,width>"});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length>,value="});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value="});

$.$defineNativeClass("HTMLVideoElement", {"": "height>,width>"});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>"});

$.$defineNativeClass("SVGElement", {
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>"});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>"});

// 59 dynamic classes.
// 183 classes
// 14 !leaf
(function() {
  var v0_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v1_SvgElement = "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFEDisplacementMapElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEImageElement|SVGFEMergeElement|SVGFilterElement|SVGFEGaussianBlurElement|SVGFESpecularLightingElement|SVGGElement|SVGFETurbulenceElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGFEFloodElement|SVGMarkerElement|SVGMaskElement|SVGImageElement|SVGForeignObjectElement|SVGFETileElement|SVGPathElement|SVGLineElement|SVGPatternElement|SVGPolylineElement|SVGRectElement|SVGPolygonElement|SVGStopElement|SVGSVGElement|SVGSymbolElement|SVGSwitchElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGComponentTransferFunctionElement|SVGFEFuncBElement|SVGFEFuncRElement|SVGFEFuncAElement|SVGFEFuncGElement|SVGFEMergeNodeElement|SVGFEDistantLightElement|SVGFEPointLightElement|SVGMetadataElement|SVGFESpotLightElement|SVGScriptElement|SVGStyleElement|SVGViewElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontFaceElement|SVGFontElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceFormatElement|SVGGlyphElement|SVGFontFaceUriElement|SVGHKernElement|SVGVKernElement|SVGMPathElement", v2_Element = [v0_MediaElement, v1_SvgElement, "Element|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement"].join("|"), v3_CharacterData = "CharacterData|Text|CDATASection|Comment", v4_Document = "Document|SVGDocument|HTMLDocument";
  $.dynamicSetMetadata([["CharacterData", v3_CharacterData], ["HTMLMediaElement", v0_MediaElement], ["Document", v4_Document], ["SVGElement", v1_SvgElement], ["Element", v2_Element], ["Node", [v2_Element, v3_CharacterData, v4_Document, "Node|ProcessingInstruction|DocumentFragment|ShadowRoot|Attr|DocumentType|EntityReference|Notation"].join("|")]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}
//@ sourceMappingURL=chcg_book_14.dart.js.map
